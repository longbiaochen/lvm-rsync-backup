#!/bin/bash

# This script performs a backup of the specified
# system logical volume to a backup logical volume
# located on a separate physical volume.
# It uses an LVM snapshot to ensure the data
# remains consistent during the backup.

SOURCE_VOLUME=$1
BACKUP_SIZE=$2
BUFFER_SIZE=$3
 
SNAPSHOT_VOLUME="${SOURCE_VOLUME}_snapshot"
SNAPSHOT_MOUNT="/mnt/snapshot"
BACKUP_VOLUME="${SOURCE_VOLUME}_backup"
BACKUP_MOUNT="/mnt/backup"

echo "Resetting snapshot..."
### First check everything was left cleanly last time, and fix if not
#
# If the snapshot mountpoint still exists try unmounting and removing it
#
if [ -h ${SNAPSHOT_VOLUME} ] ; then
umount ${SNAPSHOT_MOUNT}
rmdir ${SNAPSHOT_MOUNT}
fi

lvdisplay | grep "LV Name" | grep -q ${SNAPSHOT_VOLUME}
if [ $? = 0 ]; then
lvremove -f ${SNAPSHOT_VOLUME}
fi

echo "Creating snapshot..."
### Create a logical volume to snapshot the system volume
#
# This is created every time. The volume is deleted at the end of the
# backup as it is not necessary to keep it, wastes space and
# cpu and will freeze when full.
if [ ! -d ${SNAPSHOT_MOUNT} ] ; then
mkdir -p ${SNAPSHOT_MOUNT}
fi
chmod go-rwx ${SNAPSHOT_MOUNT}
lvcreate -L${BUFFER_SIZE} -s -n ${SNAPSHOT_VOLUME} ${SOURCE_VOLUME}
mount -o ro ${SNAPSHOT_VOLUME} ${SNAPSHOT_MOUNT}

echo "Checking backup volume..."
if [ ! -d ${BACKUP_MOUNT} ] ; then
mkdir -p  ${BACKUP_MOUNT}
fi
if [ ! -h ${BACKUP_VOLUME} ] ; then
lvcreate -L${BACKUP_SIZE} -n ${BACKUP_VOLUME} -Wy
mkfs.ext4 ${BACKUP_VOLUME}
mount ${BACKUP_VOLUME} ${BACKUP_MOUNT}
fi

echo "Updating backup..."
### Delete the oldest daily backup, if it exists
#
if [ -d ${BACKUP_MOUNT}/daily.1 ] ; then
rm -rf ${BACKUP_MOUNT}/daily.1 ;
fi

### Shift the middle snapshots(s) back by one, if they exist
if [ -d ${BACKUP_MOUNT}/daily.0 ] ; then
mv ${BACKUP_MOUNT}/daily.0 ${BACKUP_MOUNT}/daily.1 ;
fi

echo "Creating new backup from snapshot..."
### Make backup of current (snapshot) volume
#
# This method creates hard-links to the previous backup for unchanged
# files, saving considerable space.
#
rsync -a --delete --info=progress2 --link-dest=${BACKUP_MOUNT}/daily.1 \
${SNAPSHOT_MOUNT}/ ${BACKUP_MOUNT}/daily.0/

### Update the mtime of daily.0 to reflect the snapshot time
touch ${BACKUP_MOUNT}/daily.0 ;

echo "Releasing snapshot volume..."
umount ${SNAPSHOT_MOUNT}
lvremove -f ${SNAPSHOT_VOLUME}
